import type React from "react"
import type { Metadata } from "next"
import { Inter } from "next/font/google"
import "../globals.css"
import { Providers } from "../providers"
import { getMessages } from "next-intl/server"
import Navigation from "@/app/components/shared/navigation"

const inter = Inter({ 
  subsets: ["latin"],
  display: "swap",
  preload: true,
  fallback: ['system-ui', 'arial']
})

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
}

export default async function LocaleLayout({
  children,
  params,
}: {
  children: React.ReactNode
  params: Promise<{ locale: string }>
}) {
  const { locale } = await params
  
  // Validate locale and provide fallback
  const validLocales = ['en', 'ar']
  const validatedLocale = validLocales.includes(locale) ? locale : 'en'
  
  // Load messages with error handling
  let messages = {}
  try {
    messages = await getMessages({ locale: validatedLocale })
  } catch (error) {
    console.warn(`Failed to load messages for locale ${validatedLocale}:`, error)
    // Try to load English fallback
    try {
      messages = await getMessages({ locale: 'en' })
    } catch (fallbackError) {
      console.error('Failed to load fallback messages:', fallbackError)
    }
  }
  
  return (
    <html lang={validatedLocale} suppressHydrationWarning>
      <head>
        <script
          dangerouslySetInnerHTML={{
            __html: `
              // Comprehensive error handling for browser extensions and external scripts
              window.addEventListener('error', function(e) {
                console.warn('JavaScript error caught and handled:', e.message);
                // Don't let the error propagate and break the page
                e.preventDefault();
                return true;
              });

              // Handle unhandled promise rejections
              window.addEventListener('unhandledrejection', function(e) {
                console.warn('Unhandled promise rejection caught:', e.reason);
                e.preventDefault();
                return true;
              });

              // Override querySelector to prevent null errors from extensions
              const originalQuerySelector = Document.prototype.querySelector;
              Document.prototype.querySelector = function(selector) {
                try {
                  return originalQuerySelector.call(this, selector);
                } catch (e) {
                  console.warn('Selector error prevented:', e.message);
                  return null;
                }
              };

              // Protect addEventListener from being called on null elements
              const originalAddEventListener = EventTarget.prototype.addEventListener;
              EventTarget.prototype.addEventListener = function(type, listener, options) {
                if (this === null || this === undefined) {
                  console.warn('Prevented addEventListener on null/undefined element');
                  return;
                }
                return originalAddEventListener.call(this, type, listener, options);
              };
            `,
          }}
        />
      </head>
      <body className={inter.className} suppressHydrationWarning>
        <Providers messages={messages} locale={validatedLocale}>
          <div className="flex flex-col min-h-screen">
            <Navigation />
            {children}
          </div>
        </Providers>
      </body>
    </html>
  )
}
